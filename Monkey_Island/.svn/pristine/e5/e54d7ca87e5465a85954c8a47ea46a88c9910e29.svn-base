package fr.eseo.model;

/**
 * The Class Pirate.
 */
public class Pirate extends Entity {
	
	/** The state. */
	private StatePirate state;
	
	/** The energy. */
	private int energy;
	
	/** The Constant MAX_ENERGY. */
	public static final int MAX_ENERGY = 100;
	
	/** The Constant DEFAULT_STATE_PIRATE. */
	public static final StatePirate DEFAULT_STATE_PIRATE = StatePirate.sober;
	
	/**
	 * Instantiates a new pirate.
	 *
	 * @param x Coordinate x of the pirate
	 * @param y Coordinate y of the pirate
	 */
	public Pirate(int x, int y){
		super(x, y);
		this.state = DEFAULT_STATE_PIRATE;
		this.energy = MAX_ENERGY;
	}
	
	/**
	 * Instantiates a new pirate.
	 *
	 * @param state the state of the pirate
	 * @param x Coordinate x of the pirate
	 * @param y Coordinate y of the pirate
	 */
	public Pirate(StatePirate state, int x, int y){
		super(x, y);
		this.state = state;
		this.energy = MAX_ENERGY;
	}
	
	/**
	 * Instantiates a new pirate.
	 *
	 * @param energy energy of the pirate
	 * @param x Coordinate x of the pirate
	 * @param y Coordinate y of the pirate
	 */
	public Pirate(int energy, int x, int y){
		super(x, y);
		this.state = DEFAULT_STATE_PIRATE;
		this.energy = energy;
	}
	
	/**
	 * Instantiates a new pirate.
	 *
	 * @param state the state
	 * @param energy the energy
	 * @param x Coordinate x of the pirate
	 * @param y Coordinate y of the pirate
	 */
	public Pirate(StatePirate state, int energy, int x, int y){
		super(x, y);
		this.state = state;
		this.energy = energy;
	}
	
	
	/**
	 * Gets the state.
	 *
	 * @return Retourne l'état du pirate
	 */
	public StatePirate getState(){
		return this.state;
	}
	
	/**
	 * Sets the state.
	 *
	 * @param state Modifie l'état du pirate
	 */
	public void setState(StatePirate state){
		this.state = state;
		this.setChanged();
		this.notifyObservers(this.state);
	}
	
	/**
	 * Gets the energy.
	 *
	 * @return Retourne l'énergie du pirate
	 */
	public int getEnergy(){
		return this.energy;
		
	}
	
	/**
	 * Sets the energy.
	 *
	 * @param energy Modifie l'énergie du pirate
	 */
	public void setEnergy(int energy){
		this.energy = energy;
	}
	
	/**
	 * Méthode permettant de déplacer un pirate sur l'île.
	 * @param x the coordinate x of the pirate
	 * @param y the coordinate y of the pirate
	 * @throws CollisionException collision with an entity 
	 * @throws IllegalArgumentException movement not allowed
	 * @throws NullPointerException the island
	 */
	public void movementPirate(int x, int y) throws CollisionException, IllegalArgumentException, NullPointerException{
		if(!((x == -1 && y == 0) || (x == 1 && y == 0) || (x == 0 && y == 1) || (x == 0 && y == -1) || (x == 0 && y == 0))){
			throw new IllegalArgumentException("MOVEMENT not allowed");
		} 
		try{
			this.setPosition(this.getCoordinateX()+x, this.getCoordinateY()+y);
			if(this.getState() != StatePirate.dead){
				if(Island.getInstance().collisionMonkey(this.getCoordinateX()+x, this.getCoordinateY()+y) != null){
					this.setState(StatePirate.dead);
					this.setEnergy(0);
				}else if(Island.getInstance().collisionRhum(this.getCoordinateX()+x, this.getCoordinateY()+y) != null && 
						Island.getInstance().collisionRhum(this.getCoordinateX()+x, this.getCoordinateY()+y).getVisibility() == true){
					this.energy = this.energy+Rhum.DEFAULT_ENERGY_QUANTITY;	
					Island.getInstance().collisionRhum(this.getCoordinateX()+x, this.getCoordinateY()+y).setVisibility(false);
					Island.getInstance().collisionRhum(this.getCoordinateX()+x, this.getCoordinateY()+y).getTimer().start();
				} else if(this.getCoordinateX()+x == Treasure.getTreasure().getCoordinateX()
							&& this.getCoordinateY()+y == Treasure.getTreasure().getCoordinateY()){
					Treasure.getTreasure().setVisibility(true);
				} 
				this.setCoordinateX(this.getCoordinateX()+x);
				this.setCoordinateY(this.getCoordinateY()+y);
				if(this.getEnergy() != 0){
					this.setEnergy(this.energy-1);
				}
				if(this.getEnergy() == 0){
					this.setState(StatePirate.dead);
				}
			}
		}catch(CollisionException e){
			throw new CollisionException(e.getMessage(), e.getExceptionCause());
		}catch(NullPointerException e){
			throw new NullPointerException(e.getMessage());
		}
	}
	
	
}
